[globals]
NumObzv=0       ; текущий номер записи
NumObzv1=0       ; текущий номер записи для опроса
Chas=${EPOCH}
Flag=0
Flag1=0
Kan1=0
Kan2=0
Kan3=0
Kan4=0
Kan5=0
Kan6=0
Kan7=0
Kan8=0
Kan9=0
Kan10=0
Kan11=0
Kan12=0
Kan13=0
Kan14=0
Kan15=0
Kan17=0
Kan18=0
Kan19=0
Kan20=0
Kan21=0
Kan22=0
Kan23=0
Kan24=0
Kan25=0
Kan26=0
Kan27=0
Kan28=0
Kan29=0
Kan30=0
Kan31=0

[general]
autofallthrough=yes

[default]
exten => s,1,Set(GLOBAL(Kan${mycanal:6:2})=0)


[from_pstn]
exten => s,1,Answer()	 ;Открыть входящий звонок
exten => s,n,Dial(SIP/1000,30)
exten => s,n,Hangup()

[phones]
;exten => _8X.,1,Dial(Dahdi/1/29${EXTEN:1},30)
;exten => _8X.,n,Wait(10)
;exten => _8X.,n,Hangup()
;exten => _9X.,1,Answer()
;exten => _9X.,n,Set(CHANNEL(language)=ru)        
;exten => _9X.,n,SayNumber(${STRFTIME(${EPOCH},,%M%S)})
;exten => _9X.,n,Hangup()
;exten => _X.,1,Verbose(1|Extension ${EXTEN})
exten => _X.,1,Dial(DAHDI/${EXTEN:-8:2}/292${EXTEN:2},30)
;exten => _X.,n,Dial(SIP/${EXTEN},30)
exten => _X.,n,Hangup()
exten => h,1,Dial(Sip/1003,30)
exten => t,1,Hangup()
exten => failed,1,noop()

[phone_ext]
exten => _X.,1,Verbose(1|Extension ${EXTEN})
exten => _X.,n,Dial(SIP/1000,30)
exten => _X.,n,Hangup()

[timer]
exten => failed,1,GoToIf($["${GLOBAL(Flag)}"!="0"]?konec)	; Flag - переменная для предотвращения случайного запуска паралельного процесса
exten => failed,n,Set(GLOBAL(Flag)=1)	; если равен один, то процесс уже запущен
exten => failed,n,GoToIf($["${GLOBAL(NumObzv)}"!="0"]?cicle1) ; если не первый запуск обзвона (прозвонка продолжается)
exten => failed,n,GoToIf($["${GLOBAL(Chas)}">"${EPOCH}"]?end) ; если первый запуск, проверка времени после начала прошлой прозвонки	 
exten => failed,n,Set(GLOBAL(Chas)=${MATH(${EPOCH}+600,int)}) ; если время прошло достаточно, установка Chas на 999 сек.
exten => failed,n,GoTo(cicle1)          ; переход на начало  прозвонки            
exten => failed,n(vremold),SET(Dozv_vrem(${mynom})=${STRFTIME(${EPOCH},,%d%m-%R)})   ; если время прошло, приостановка номера
exten => failed,n(cicle1),SET(mynom=${Dozv_nom(${GLOBAL(NumObzv)})})  ; (начало прозвонки) проверить следующий необзвоненый номер
exten => failed,n,GoToIf($["${mynom}"=""]?nach1)                ;если нет необзвоненых номеров,  -  повторить поиск сначала
exten => failed,n,SET(Nomer=${Dozv_inf(nomer,${mynom})})        ; получить номер, куда звонить
exten => failed,n,SET(Summa=${Dozv_inf(summa,${mynom})})        ; получить сумму долга
exten => failed,n,SET(Spisok=${Dozv_inf(spisok,${mynom})})        ; получить номер списка
exten => failed,n,SET(vrem=${Spis_info(vrem,${Spisok})})  ; получить время окончания данного списка
exten => failed,n,GoToIf($[${vrem}<${EPOCH}]?vremold) ; если время прошло переход выше на метку vremold
exten => failed,n,Set(time_now=${MATH(${EPOCH}+${timest},int)}) ; unix время с учетом часового пояса и летнего (в скрипте perl) 
exten => failed,n,Set(dni=${MATH(${time_now}/86400,int)}) ; количество дней всего
exten => failed,n,Set(temp=${MATH(${dni}*86400,int)}) ; количество секунд на 0 часов
exten => failed,n,Set(sec=${MATH(${time_now}-${temp},int)}) ; количество секунд сегодня
exten => failed,n,Set(temp=${MATH(${dni}/7,int)}) ; количество недель
exten => failed,n,Set(temp=${MATH(${temp}*7,int)}) ; количество дней на четверг
exten => failed,n,Set(den=${MATH(${dni}-${temp},int)}) ; день недели с четверга
exten => failed,n,Set(den=${MATH(${den}+4,int)}) ; день с понедельника
exten => failed,n,Execif($[${den}>7]?Set(den=${MATH(${den}-7,int)})) ; день недели 1-понедельник
exten => failed,n,SET(d${den}_1=${Spis_info(d${den}_1,${Spisok})})  ; получить первое время начала данного списка для текущего дня
exten => failed,n,GoToIf($[${d${den}_1}>${sec}]?cicle) ;  если время еще не пришло
exten => failed,n,SET(d${den}_2=${Spis_info(d${den}_2,${Spisok})})  ; получить первое время конца данного списка для текущего дня
exten => failed,n,GoToIf($[${d${den}_2}>${sec}]?prod) ;  если время конца еще не пришло продолжать
exten => failed,n,SET(d${den}_3=${Spis_info(d${den}_3,${Spisok})})  ; получить второе время начала данного списка для текущего дня
exten => failed,n,GoToIf($[${d${den}_3}>${sec}]?cicle) ;  если время еще не пришло
exten => failed,n,SET(d${den}_4=${Spis_info(d${den}_4,${Spisok})})  ; получить второе время конца данного списка для текущего дня
exten => failed,n,GoToIf($[${d${den}_4}>${sec}]?prod:cicle) ;  если время конца еще не пришло продолжать иначе следующий
exten => failed,n(prod),noop()
exten => failed,n,GoToIf($[${STRFTIME(${EPOCH},,%S)}>55]?end) ; если время больше 55 сек , выйти.
exten => failed,n,Gotoif($[${LEN(${Nomer})}=7]?:cicle) ; если не 7 знаков в номере - продолжать со следующим.
exten => failed,n,Set(cikl=1) ; определение свободного каналя для первый 15
exten => failed,n,While($[${cikl}<16])
exten => failed,n,GoToIf($["${GLOBAL(Kan${cikl})}"="1"]?mkan15)
exten => failed,n,Set(Ncanal="Dahdi/${cikl}")
exten => failed,n,ChanIsAvail(${Ncanal})
exten => failed,n,Execif($["${AVAILORIGCHAN}"!=""]?Set(GLOBAL(Kan${cikl})=1):Goto(mkan15))
exten => failed,n,ExecIf($["${AVAILORIGCHAN}"!=""]?Set(cikl=32))
exten => failed,n(mkan15),Set(cikl=$[${cikl}+1])
;exten => failed,n,wait(1)
exten => failed,n,EndWhile
exten => failed,n,ExecIf($[${cikl}=16]?Set(cikl=17))	; определение свободного для следующих 
exten => failed,n,While($[${cikl}<30])
exten => failed,n,GoToIf($["${GLOBAL(Kan${cikl})}"="1"]?mkan29)
exten => failed,n,Set(Ncanal="Dahdi/${cikl}")
exten => failed,n,ChanIsAvail(${Ncanal})
exten => failed,n,Execif($["${AVAILORIGCHAN}"!=""]?Set(GLOBAL(Kan${cikl})=1):Goto(mkan29))
exten => failed,n,ExecIf($["${AVAILORIGCHAN}"!=""]?Set(cikl=32))
exten => failed,n(mkan29),Set(cikl=$[${cikl}+1])
exten => failed,n,EndWhile
exten => failed,n,noop(${Ncanal})
exten => failed,n,Gotoif($[${cikl}=33]?rab)
exten => failed,n(m30),Wait(1) ; если ни один канал не оказался свободным, то пауза на 1 сек
exten => failed,n,GoTo(prod) ; переход на проверку времени и поиск каналов сначала
exten => failed,n(rab),System(perl /var/lib/asterisk/agi-bin/form_call.agi ${Nomer} ${Summa} ${Ncanal} ${Spisok} &)      ; сформировать и запустить call-фай
;exten => failed,n(rab),AGI(form_call.agi, ${Nomer}, ${Summa}, ${Ncanal}, ${Spisok})      ; сформировать и запустить call-фай
exten => failed,n(cicle),Set(GLOBAL(NumObzv)=${mynom}) ; установить текущий номер записи
;exten => failed,n,Wait(1)
exten => failed,n,GoTo(cicle1)  ; -продолжить создавать call-файлы
exten => failed,n,GoTo(end)  ; переход на конец
exten => failed,n(nach1),GoToIf($["${GLOBAL(NumObzv)}"="0"]?:ppp)
exten => failed,n,Set(GLOBAL(Chas)=${EPOCH})) ; если осталось начало (нет непрозвоненых номеров в базе) сброс времени
exten => failed,n(ppp),Set(GLOBAL(NumObzv)=0) ; сбросить номера на начало
exten => failed,n(vihod),noop() ;AGI(form_call.agi, 777, 1, "SIP")  
exten => failed,n(end),Set(GLOBAL(Flag)=0) ; конец , сбросить флаг в 0
exten => failed,n(konec),noop() ; выход (здесь выходит случайно запущеный паралельный процесс)

[timer1]
exten => failed,1,Gotoif($["${GLOBAL(Flag1)}"="1"]?endmkan) ; выход
exten => failed,n,Set(GLOBAL(Flag1)=1) ;  Установка флага, что программа уже запущена
exten => failed,n,SET(kolkilk=0)
exten => failed,n(beg1),Execif($["${GLOBAL(NumObzv1)}"=""}]?SET(GLOBAL(NumObzv1)=0))
exten => failed,n,noop(${GLOBAL(NumObzv1)},${Sign_kilk()})
exten => failed,n,Set(ARRAY(nomer,GLOBAL(NumObzv1))=${Sign_nnom(${GLOBAL(NumObzv1)})}) ; получаем следующий номер
exten => failed,n,Gotoif($[${LEN(${nomer})}=7]?:prod1) ; если не 7 знаков в номере - продолжать со следующим.
exten => failed,n(mkan30),Set(cikl=30)
exten => failed,n,While($[${cikl}<32])
exten => failed,n,GoToIf($["${GLOBAL(Kan${cikl})}"="1"]?mkan31)
exten => failed,n,Set(Nocanal="Dahdi/${cikl}")
exten => failed,n,ChanIsAvail(${Nocanal})
exten => failed,n,Execif($["${AVAILORIGCHAN}"!=""]?Set(GLOBAL(Kan${cikl})=1):Goto(mkan31))
exten => failed,n,ExecIf($["${AVAILORIGCHAN}"!=""]?Set(cikl=32))
exten => failed,n(mkan31),Set(cikl=$[${cikl}+1])
exten => failed,n,EndWhile
exten => failed,n,Gotoif($[${cikl}=33]?call1start)
exten => failed,n(mkan32),Wait(10)		; пауза если все каналі заняты
exten => failed,n,SET(kolkilk=${MATH(${kolkilk}+1,int)})
exten => failed,n,Gotoif($[${kolkilk}<5]?mkan30:beg2) ; 	на начало опроса каналов
exten => failed,n(call1start),System(perl /var/lib/asterisk/agi-bin/form_call2.agi ${nomer} ${Nocanal} &)
exten => failed,n(prod1),noop(${GLOBAL(NumObzv1)},${Sign_kilk(${nomer})})
exten => failed,n,Gotoif($["${GLOBAL(NumObzv1)}"="${Sign_kilk(${nomer})}"}]?ending) ; если это был последний номер конец
exten => failed,n,Goto(beg1) ;  продолжать
exten => failed,n(ending),Set(GLOBAL(NumObzv1)=0) ; следующий вызов с первого номера.  
exten => failed,n(beg2),Set(GLOBAL(Flag1)=0) ;
exten => failed,n(endmkan),noop() ; выход


[zvon]
exten => _X.,1,Answer()         ; ответ
exten => _X.,n,SET(Dozv_otv(${mynomer},${myspisok})=${STRFTIME(${EPOCH},,%d%m-%R)}) ; установка трубка снята
exten => _X.,n,Set(CHANNEL(language)=ru)        ; русский язык
exten => _X.,n,Playback("abonent")    ; приветствие
exten => _X.,n,ExecIf($["${mynomer:-7:1}"="2"]?SayNumber(${mynomer:-6:2}):SayNumber(${mynomer:-5:1})) ; сказать 2 или 1 цифру (город или район)
exten => _X.,n,ExecIf($["${mynomer:-4:1}"="0"]?Playback(digits/0)) ; произношение следующий двух цифр (0- если 0 впереди)
exten => _X.,n,SayNumber(${mynomer:-4:2})
exten => _X.,n,ExecIf($["${mynomer:-2:1}"="0"]?Playback(digits/0)) ; последние 2 цифры
exten => _X.,n,SayNumber(${mynomer:-2:2})
exten => _X.,n,SET(nomer1=${Spis_info(nomer1,${myspisok})}) ; получение всех переменых соответствующего списка
exten => _X.,n,SET(nomer2=${Spis_info(nomer2,${myspisok})})
exten => _X.,n,SET(nomer3=${Spis_info(nomer3,${myspisok})})
exten => _X.,n,SET(splatyty=${Spis_info(splatyty,${myspisok})}) 
exten => _X.,n,SET(borg=${Spis_info(borg,${myspisok})}) 
;exten => _X.,n,SET(misac=${Spis_info(misac,${myspisok})}) 
exten => _X.,n,SET(info=${Spis_info(info,${myspisok})})
exten => _X.,n,GoToIf($[${mysumma}=0]?soobsh) ; если сумма равна 0,  переход на информационное сообщение.
;exten => _X.,n,Playback("borg_data") ; говорится о состоянии на
;exten => _X.,n,Playback("${misac}") ; называется дата (1 и месяц) в зависимости от выбраного в списке
exten => _X.,n,Playback("borg/${borg}") ;  сообщение о долге соотв. выбраному списку
exten => _X.,n,SayNumber(${mysumma},f) ; называется сумма
exten => _X.,n,SET(znak_sum=${mysumma:-1:1})
exten => _X.,n,GoToIf($["${mysumma:-2:1}"="1"]?grn0)  
exten => _X.,n,ExecIf($["${znak_sum}"="1"]?Playback(digits/grivna))
exten => _X.,n,ExecIf($["${znak_sum}"="2"]?Playback(digits/grivni))
exten => _X.,n,ExecIf($["${znak_sum}"="3"]?Playback(digits/grivni))
exten => _X.,n,ExecIf($["${znak_sum}"="4"]?Playback(digits/grivni))
exten => _X.,n,ExecIf($["${znak_sum}"="5"]?Playback(digits/griven))
exten => _X.,n,ExecIf($["${znak_sum}"="6"]?Playback(digits/griven))
exten => _X.,n,ExecIf($["${znak_sum}"="7"]?Playback(digits/griven))
exten => _X.,n,ExecIf($["${znak_sum}"="8"]?Playback(digits/griven))
exten => _X.,n,ExecIf($["${znak_sum}"="9"]?Playback(digits/griven))
exten => _X.,n,ExecIf($["${znak_sum}"="0"]?Playback(digits/griven))
exten => _X.,n,GoTo(grn1)
exten => _X.,n(grn0),Playback("digits/griven")
exten => _X.,n(grn1),SET(Dozv_norm(${mynomer},${myspisok})=${STRFTIME(${EPOCH},,%d%m-%R)}) ; отметка о прослушаном сообщ.
exten => _X.,n,Playback("splatyty/${splatyty}")  ;  сообщение о условии оплаты, в зависимости от выбраного в списке
exten => _X.,n,Playback("dovidky_za_telefonom")
exten => _X.,n,GoToIf($["${nomer1:-7:1}"=" "]?met0) ;
exten => _X.,n,ExecIf($["${nomer1:-10:1}"="0"]?Playback(digits/0)) ; называются 0
exten => _X.,n,ExecIf($["${nomer1:-9:3}"="800"]?SayNumber(800)) ; 
exten => _X.,n(met0),GotoIf($["${nomer1:-6:2}"="  "]?met1) ; называются телефоны для справок (введенные в список)
exten => _X.,n,SayNumber(${nomer1:-6:2})
exten => _X.,n,ExecIf($["${nomer1:-4:1}"="0"]?Playback(digits/0))
exten => _X.,n(met1),GotoIf($["${nomer1:-4:2}"="  "]?met2)
exten => _X.,n,SayNumber(${nomer1:-4:2})
exten => _X.,n,ExecIf($["${nomer1:-2:1}"="0"]?Playback(digits/0))
exten => _X.,n(met2),GotoIf($["${nomer1:-2:2}"="  "]?met3)
exten => _X.,n,SayNumber(${nomer1:-2:2})
;exten => _X.,n,ExecIf($["${nomer2:-1:1}"="0"]?:Playback("chy"))
exten => _X.,n,Wait(1)
exten => _X.,n(met3),GotoIf($["${nomer2:-6:2}"="  "]?met4)
exten => _X.,n,SayNumber(${nomer2:-6:2})
exten => _X.,n,ExecIf($["${nomer2:-4:1}"="0"]?Playback(digits/0))
exten => _X.,n(met4),GotoIf($["${nomer2:-4:2}"="  "]?met5)
exten => _X.,n,SayNumber(${nomer2:-4:2})
exten => _X.,n,ExecIf($["${nomer2:-2:1}"="0"]?Playback(digits/0))
exten => _X.,n(met5),GotoIf($["${nomer2:-2:2}"="  "]?met6)
exten => _X.,n,SayNumber(${nomer2:-2:2})
;exten => _X.,n,ExecIf($["${nomer3:-1:1}"="0"]?:Playback("chy"))
exten => _X.,n,Wait(1)
exten => _X.,n(met6),GotoIf($["${nomer3:-6:2}"="  "]?met7)
exten => _X.,n,SayNumber(${nomer3:-6:2})
exten => _X.,n,ExecIf($["${nomer3:-4:1}"="0"]?Playback(digits/0))
exten => _X.,n(met7),GotoIf($["${nomer3:-4:2}"="  "]?met8)
exten => _X.,n,SayNumber(${nomer3:-4:2})
exten => _X.,n,ExecIf($["${nomer3:-2:1}"="0"]?Playback(digits/0))
exten => _X.,n(met8),GotoIf($["${nomer3:-2:2}"="  "]?met9)
exten => _X.,n,SayNumber(${nomer3:-2:2})
exten => _X.,n(met9),noop()
exten => _X.,n(soobsh),Playback("info/${info}") ;  информационное сообщение (введенное в списке)
exten => _X.,n,SET(Dozv_norm(${mynomer},${myspisok})=${STRFTIME(${EPOCH},,%d%m-%R)}) ; отметка о прослушанном сообщении
exten => _X.,n,Playback(dyakuemo)
exten => _X.,n,Wait(20)
exten => _X.,n,SET(Dozv_aon(${mynomer},${myspisok})=${STRFTIME(${EPOCH},,%d%m-%R)}) ;если не положили трубку после прослушки, то отм о АОНе
exten => _X.,n,Hangup()
exten => h,1,Set(GLOBAL(Kan${mycanal:6:2})=0)
exten => failed,1,SET(Dozv_nedozv(${mynomer},${myspisok})=${STRFTIME(${EPOCH},,%d%m-%R)}) ; установка попытки
exten => failed,n,Set(GLOBAL(Kan${mycanal:6:2})=0)

[zvon1]
exten => _X.,1,Answer()         ; ответ			${STRFTIME(${EPOCH},,%d%m-%R)})
exten => _X.,n,noop(${CHANNEL});
exten => _X.,n,Set(kanok=0);
exten => _X.,n,Set(ARRAY(tr3,pr220,vikl,id,stan,nootvv,tr3v,pr220v)=${Sign_zapr(${nomer})}) ; получаем предыдущие значения сигналов
exten => _X.,n,Set(digitmy=);
exten => _X.,n,Wait(5)
exten => _X.,n,Gosub(cifr)
exten => _X.,n,GoToIf($["${GOSUB_RETVAL}"=""]?formcall)   ; Если  не принято переход на формиров колл файла для второга звонка
exten => _X.,n,Set(digitmy=${digitmy}${GOSUB_RETVAL});
exten => _X.,n,Gosub(cifr)
exten => _X.,n,GoToIf($["${GOSUB_RETVAL}"=""]?formcall)   ; Если  не принято переход на формиров колл файла для второга звонка
exten => _X.,n,Set(digitmy=${digitmy}${GOSUB_RETVAL});
exten => _X.,n,Gosub(cifr)
exten => _X.,n,GoToIf($["${GOSUB_RETVAL}"=""]?formcall)   ; Если  не принято переход на формиров колл файла для второга звонка
exten => _X.,n,Set(digitmy=${digitmy}${GOSUB_RETVAL});
exten => _X.,n,Gosub(cifr)
exten => _X.,n,GoToIf($["${GOSUB_RETVAL}"=""]?formcall)   ; Если  не принято переход на формиров колл файла для второга звонка
exten => _X.,n,Set(digitmy=${digitmy}${GOSUB_RETVAL});
exten => _X.,n,Gosub(cifr)
exten => _X.,n,GoToIf($["${GOSUB_RETVAL}"=""]?formcall)   ; Если  не принято переход на формиров колл файла для второга звонка
exten => _X.,n,Set(digitmy=${digitmy}${GOSUB_RETVAL});
exten => _X.,n,Gosub(cifr)
exten => _X.,n,GoToIf($["${GOSUB_RETVAL}"=""]?formcall)   ; Если  не принято переход на формиров колл файла для второга звонка
exten => _X.,n,Set(digitmy=${digitmy}${GOSUB_RETVAL});
exten => _X.,n,Gosub(cifr)
exten => _X.,n,GoToIf($["${GOSUB_RETVAL}"=""]?formcall)   ; Если  не принято переход на формиров колл файла для второга звонка
exten => _X.,n,Set(digitmy=${digitmy}${GOSUB_RETVAL});
exten => _X.,n,Gosub(cifr)
exten => _X.,n,GoToIf($["${GOSUB_RETVAL}"=""]?formcall)   ; Если  не принято переход на формиров колл файла для второга звонка
exten => _X.,n,Set(digitmy=${digitmy}${GOSUB_RETVAL});
exten => _X.,n,Gosub(cifr)
exten => _X.,n,GoToIf($["${GOSUB_RETVAL}"=""]?formcall)   ; Если  не принято переход на формиров колл файла для второга звонка
exten => _X.,n,Set(digitmy=${digitmy}${GOSUB_RETVAL});
exten => _X.,n,Gosub(cifr)
exten => _X.,n,GoToIf($["${GOSUB_RETVAL}"=""]?formcall)   ; Если  не принято переход на формиров колл файла для второга звонка
exten => _X.,n,Set(digitmy=${digitmy}${GOSUB_RETVAL});
exten => _X.,n,Gosub(cifr)
exten => _X.,n,GoToIf($["${GOSUB_RETVAL}"=""]?formcall)   ; Если  не принято переход на формиров колл файла для второга звонка
exten => _X.,n,Set(digitmy=${digitmy}${GOSUB_RETVAL});
exten => _X.,n,Gosub(cifr)
exten => _X.,n,GoToIf($["${GOSUB_RETVAL}"=""]?formcall)   ; Если  не принято переход на формиров колл файла для второга звонка
exten => _X.,n,Set(digitmy=${digitmy}${GOSUB_RETVAL});
exten => _X.,n,Gosub(cifr)
exten => _X.,n,GoToIf($["${GOSUB_RETVAL}"=""]?formcall)   ; Если  не принято переход на формиров колл файла для второга звонка
exten => _X.,n,Set(digitmy=${digitmy}${GOSUB_RETVAL});
exten => _X.,n,Gosub(cifr)
exten => _X.,n,GoToIf($["${GOSUB_RETVAL}"=""]?formcall)   ; Если  не принято переход на формиров колл файла для второга звонка
exten => _X.,n,Set(digitmy=${digitmy}${GOSUB_RETVAL});
exten => _X.,n,Gosub(cifr)
exten => _X.,n,GoToIf($["${GOSUB_RETVAL}"=""]?formcall)   ; Если  не принято переход на формиров колл файла для второга звонка
exten => _X.,n,Set(digitmy=${digitmy}${GOSUB_RETVAL});
exten => _X.,n,Gosub(cifr)
exten => _X.,n,GoToIf($["${GOSUB_RETVAL}"=""]?formcall)   ; Если  не принято переход на формиров колл файла для второга звонка
exten => _X.,n,Set(digitmy=${digitmy}${GOSUB_RETVAL});
exten => _X.,n,Gosub(cifr)
exten => _X.,n,GoToIf($["${GOSUB_RETVAL}"=""]?formcall)   ; Если  не принято переход на формиров колл файла для второга звонка
exten => _X.,n,Set(digitmy=${digitmy}${GOSUB_RETVAL});
exten => _X.,n,Gosub(cifr)
exten => _X.,n,GoToIf($["${GOSUB_RETVAL}"=""]?formcall)   ; Если  не принято переход на формиров колл файла для второга звонка
exten => _X.,n,Set(digitmy=${digitmy}${GOSUB_RETVAL});
exten => _X.,n,Gosub(cifr)
exten => _X.,n,GoToIf($["${GOSUB_RETVAL}"=""]?formcall)   ; Если  не принято переход на формиров колл файла для второга звонка
exten => _X.,n,Set(digitmy=${digitmy}${GOSUB_RETVAL});
exten => _X.,n,noop(${digitmy},${LEN(${digitmy})})
;exten => _X.,n,GoToIf($[${LEN(${digitmy})}=19]?:formcall)   ; Если  не совпадают переход на формиров колл файла для второга звонка
;exten => _X.,n,GoToIf($[${digitmy:-19:1}=${tr1}]?noins1)      
;exten => _X.,n,SET(ins=0)
;exten => _X.,n,SET(tr1v=${MATH(${EPOCH}-${MATH(${digitmy:-18:2}*300)},int)})
;exten => _X.,n,SET(ins=1)
;exten => _X.,n(noins1),GoToIf($[${digitmy:-16:1}=${tr2}]?noins2)
;exten => _X.,n,SET(tr2v=${MATH(${EPOCH}-${MATH(${digitmy:-15:2}*300)},int)})
;exten => _X.,n,SET(ins=1)
exten => _X.,n(noins2),GoToIf($[${digitmy:-13:1}=${tr3}]?noins3)
exten => _X.,n,SET(tr3v=${MATH(${EPOCH}-${MATH(${digitmy:-12:2}*300)},int)})
exten => _X.,n,SET(ins=1)
exten => _X.,n(noins3),GoToIf($[${digitmy:-6:1}=${pr220}]?noins4)
exten => _X.,n,SET(pr220v=${MATH(${EPOCH}-${MATH(${digitmy:-5:2}*300)},int)})
exten => _X.,n,SET(ins=1)
exten => _X.,n(noins4),SET(temper=${digitmy:-3:2})
exten => _X.,n,GoToIf($[${digitmy:-1:1}=${vikl}]?noins5)  ;
exten => _X.,n,SET(ins=1)
exten => _X.,n(noins5),GotoIf($["${ins}"="1"]?ins)
exten => _X.,n,Execif($[${stan}<2]?SET(stan=0))
exten => _X.,n,SET(Sign_mod(${id},${digitmy:-10:2},${digitmy:-8:2},${stan},${temper},${digitmy:-19:3},${digitmy:-16:3})=${EPOCH}) ; нет изменений, - модернизируем только время и напряжения.
exten => _X.,n,GoTo(kon)
exten => _X.,n(cifr),Read(cyfra,,4)    ; Прием цифры в тональном наборе
exten => _X.,n,GotoIf($[${LEN(${cyfra})}>1]?:returnis)  
exten => _X.,n,Execif($[${cyfra:-2:1}=${cyfra:-1:1}]?Return(${cyfra:-2:1}))
exten => _X.,n,Execif($[${cyfra:-3:1}=${cyfra:-2:1}]?Return(${cyfra:-3:1}))
exten => _X.,n,Execif($[${cyfra:-3:1}=${cyfra:-1:1}]?Return(${cyfra:-3:1}))
exten => _X.,n(returnis),Return()
exten => _X.,n(ins),Set(Sign_insert(${digitmy:-19:3},${digitmy:-16:3},${digitmy:-13:1},${tr3v},${digitmy:-10:2},${digitmy:-8:2},${digitmy:-6:1},${pr220v},${digitmy:-1:1},${nomer},${nootvv},${temper})=${EPOCH})
exten => _X.,n(kon),Set(kanok=1)  ; установка признака, что все выполнено 
exten => _X.,n(formcall),Hangup() ; ложим трубку
exten => h,1,Execif($["${kanok}"="0"]?SET(Sign_err(${id},55)=${EPOCH}))     ;
exten => h,n,Set(GLOBAL(Kan${mycanal:6:2})=0)
exten => failed,1,Set(ARRAY(tr3,pr220,vikl,id,stan,nootvv)=${Sign_zapr(${nomer})}) ; получаем предыдущие значения сигналов
exten => failed,n,SET(Sign_nootv(${id},222)=${EPOCH})
exten => failed,n,Set(GLOBAL(Kan${mycanal:6:2})=0)




[incoming]
exten => s,1,Answer()
exten => s,n,Background(info/main-menu)
exten => s,n,WaitExten()

exten => 2,1,Playback(digits/2)
exten => 2,n,Playback(dyakuemo)
exten => 2,n,Hangup()

exten => 3,1,Playback(digits/3)
exten => 3,n,Playback(dyakuemo)
exten => 3,n,Hangup()

exten => 4,1,Playback(digits/4)
exten => 4,n,Playback(dyakuemo)
exten => 4,n,Hangup()


